{"ast":null,"code":"var _jsxFileName = \"/Users/lim/Desktop/Project/react_helloworld/src/components/Lists.js\";\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport List from './List';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Lists = /*#__PURE__*/React.memo(_c = _ref => {\n  let {\n    todoData,\n    setTodoData,\n    handleClick\n  } = _ref;\n  console.log(\"Lists.js\");\n  const handleStart = result => {};\n  const handleEnd = result => {\n    // 매개변수 result에는 source항목 및 destination과 같은 드래그 이벤트에 대한 정보가 포함된다.\n\n    // destination이 없으면 함수를 종료한다.\n    if (!result.destination) return;\n\n    // Array.splice(): 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경하는 메소드\n    // splice(index, 0, value) : index에 value추가\n    // splice(index, count): index에 count수 만큼 삭제.\n    const newTodoData = todoData;\n\n    // 1. 변경시키는 아이템을 배열에서 지워준다.\n    // 2. return 값으로 지워진 아이템을 잡아준다.\n    const [reorderedItem] = newTodoData.splice(result.source.index, 1);\n\n    // 원하는 자리에 reorderedItem을 넣는다.\n    newTodoData.splice(result.destination.index, 0, reorderedItem);\n    setTodoData(newTodoData); // 상태 업데이트\n    localStorage.setItem('todoData', JSON.stringify(newTodoData));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragStart: handleStart,\n      onDragEnd: handleEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"todo\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [todoData.map((data, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: data.id.toString(),\n            index: index,\n            children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(List, {\n              handleClick: handleClick,\n              id: data.id,\n              title: data.title,\n              completed: data.completed,\n              todoData: todoData,\n              setTodoData: setTodoData,\n              provided: provided,\n              snapshot: snapshot\n            }, data.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 41\n            }, this)\n          }, data.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n});\n_c2 = Lists;\nexport default Lists;\nvar _c, _c2;\n$RefreshReg$(_c, \"Lists$React.memo\");\n$RefreshReg$(_c2, \"Lists\");","map":{"version":3,"names":["React","DragDropContext","Droppable","Draggable","List","Lists","memo","todoData","setTodoData","handleClick","console","log","handleStart","result","handleEnd","destination","newTodoData","reorderedItem","splice","source","index","localStorage","setItem","JSON","stringify","provided","droppableProps","innerRef","map","data","id","toString","snapshot","title","completed","placeholder"],"sources":["/Users/lim/Desktop/Project/react_helloworld/src/components/Lists.js"],"sourcesContent":["import React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport List from './List';\n\nconst Lists = React.memo(({ todoData, setTodoData, handleClick }) => {\n    console.log(\"Lists.js\");\n    const handleStart = (result) => {\n    }\n\n    const handleEnd = (result) => {\n        // 매개변수 result에는 source항목 및 destination과 같은 드래그 이벤트에 대한 정보가 포함된다.\n\n        // destination이 없으면 함수를 종료한다.\n        if(!result.destination) return;\n\n        // Array.splice(): 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경하는 메소드\n        // splice(index, 0, value) : index에 value추가\n        // splice(index, count): index에 count수 만큼 삭제.\n        const newTodoData = todoData;\n\n        // 1. 변경시키는 아이템을 배열에서 지워준다.\n        // 2. return 값으로 지워진 아이템을 잡아준다.\n        const [reorderedItem] = newTodoData.splice(result.source.index, 1);\n\n        // 원하는 자리에 reorderedItem을 넣는다.\n        newTodoData.splice(result.destination.index, 0, reorderedItem);\n        setTodoData(newTodoData); // 상태 업데이트\n        localStorage.setItem('todoData', JSON.stringify(newTodoData));\n    }\n\n    return (\n        <div>\n            <DragDropContext onDragStart={ handleStart} onDragEnd={ handleEnd }>\n                <Droppable droppableId=\"todo\">\n                    {(provided) => (\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\n                            {todoData.map((data, index) => (\n                                <Draggable\n                                    key={data.id}\n                                    draggableId={data.id.toString()}\n                                    index={index}\n                                >\n                                    {(provided, snapshot) => (\n                                        <List\n                                            handleClick={handleClick}\n                                            key={data.id}\n                                            id={data.id}\n                                            title={data.title}\n                                            completed={data.completed}\n                                            todoData={todoData}\n                                            setTodoData={setTodoData}\n                                            provided={provided}\n                                            snapshot={snapshot}\n                                        />\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </div>\n    )\n})\nexport default Lists;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC3E,OAAOC,IAAI,MAAM,QAAQ;AAAC;AAE1B,MAAMC,KAAK,gBAAGL,KAAK,CAACM,IAAI,MAAC,QAA4C;EAAA,IAA3C;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAY,CAAC;EAC5DC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,MAAMC,WAAW,GAAIC,MAAM,IAAK,CAChC,CAAC;EAED,MAAMC,SAAS,GAAID,MAAM,IAAK;IAC1B;;IAEA;IACA,IAAG,CAACA,MAAM,CAACE,WAAW,EAAE;;IAExB;IACA;IACA;IACA,MAAMC,WAAW,GAAGT,QAAQ;;IAE5B;IACA;IACA,MAAM,CAACU,aAAa,CAAC,GAAGD,WAAW,CAACE,MAAM,CAACL,MAAM,CAACM,MAAM,CAACC,KAAK,EAAE,CAAC,CAAC;;IAElE;IACAJ,WAAW,CAACE,MAAM,CAACL,MAAM,CAACE,WAAW,CAACK,KAAK,EAAE,CAAC,EAAEH,aAAa,CAAC;IAC9DT,WAAW,CAACQ,WAAW,CAAC,CAAC,CAAC;IAC1BK,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW,CAAC,CAAC;EACjE,CAAC;EAED,oBACI;IAAA,uBACI,QAAC,eAAe;MAAC,WAAW,EAAGJ,WAAY;MAAC,SAAS,EAAGE,SAAW;MAAA,uBAC/D,QAAC,SAAS;QAAC,WAAW,EAAC,MAAM;QAAA,UACvBW,QAAQ,iBACN;UAAA,GAASA,QAAQ,CAACC,cAAc;UAAE,GAAG,EAAED,QAAQ,CAACE,QAAS;UAAA,WACpDpB,QAAQ,CAACqB,GAAG,CAAC,CAACC,IAAI,EAAET,KAAK,kBACtB,QAAC,SAAS;YAEN,WAAW,EAAES,IAAI,CAACC,EAAE,CAACC,QAAQ,EAAG;YAChC,KAAK,EAAEX,KAAM;YAAA,UAEZ,CAACK,QAAQ,EAAEO,QAAQ,kBAChB,QAAC,IAAI;cACD,WAAW,EAAEvB,WAAY;cAEzB,EAAE,EAAEoB,IAAI,CAACC,EAAG;cACZ,KAAK,EAAED,IAAI,CAACI,KAAM;cAClB,SAAS,EAAEJ,IAAI,CAACK,SAAU;cAC1B,QAAQ,EAAE3B,QAAS;cACnB,WAAW,EAAEC,WAAY;cACzB,QAAQ,EAAEiB,QAAS;cACnB,QAAQ,EAAEO;YAAS,GAPdH,IAAI,CAACC,EAAE;cAAA;cAAA;cAAA;YAAA;UASnB,GAhBID,IAAI,CAACC,EAAE;YAAA;YAAA;YAAA;UAAA,QAkBnB,CAAC,EACDL,QAAQ,CAACU,WAAW;QAAA;UAAA;UAAA;UAAA;QAAA;MAE5B;QAAA;QAAA;QAAA;MAAA;IACO;MAAA;MAAA;MAAA;IAAA;EACE;IAAA;IAAA;IAAA;EAAA,QAChB;AAEd,CAAC,CAAC;AAAA,MA5DI9B,KAAK;AA6DX,eAAeA,KAAK;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}